[{"path":"https://rprojroot.r-lib.org/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://rprojroot.r-lib.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 rprojroot authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://rprojroot.r-lib.org/TODO.html","id":"docs-branch","dir":"","previous_headings":"","what":"docs branch","title":"Steps for adopting older packages to new development standards","text":"Create last released tag Copy .github/workflows/pkgdown.yaml Fix URL DESCRIPTION, don’t forget trailing slash Tweak _pkgdown.yml Set source GitHub Pages branch","code":""},{"path":"https://rprojroot.r-lib.org/TODO.html","id":"separate-pull-requests","dir":"","previous_headings":"","what":"Separate pull requests","title":"Steps for adopting older packages to new development standards","text":"Use GitHub Actions Disable tic Disable Travis CI AppVeyor usethis::use_coverage() Consider open pull requests Tweak README use downlit::readme_document load_all() possible Update roxygen2 Use @examplesIf appropriate styler::style_pkg() Remove Collate: usethis::use_lifecycle_badge() usethis::use_lifecycle() Add pkgdown reference index Adapt tests testthat 3e Ensure dependency source files cycle-free, https://github.com/yonicd/foreman/issues/2 Ensure source files correspond test files via devtools::test_coverage_file() Import rlang appropriate Close open issues Deprecate functions moved somewhere else Avoid iris Synchronize downstream packages Add type documentation function arguments, ?::Check goodpractice::gp() Switch pkgdown dev mode “auto” Release CRAN","code":""},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"tldr","dir":"Articles","previous_headings":"","what":"TL;DR","title":"Finding files in project subdirectories","text":"project: R package? RStudio project? something else? now, assume ’s R package: root object contains function helps locating files root package, regardless current working directory. sure working directory somewhere project’s root, use root$find_file() function. example , ’re starting vignettes subdirectory find original DESCRIPTION file: one exception: first component passed find_file() already absolute path. allows safely applying function paths may absolute relative: can also construct accessor root using root$make_fix_file() function: Note root_file() function works just like $find_file() find files even current working directory outside project: know absolute path directory project, sure current working directory, pass absolute path root$make_fix_file(): last resort, can get path standalone R scripts vignettes using thisfile() function: remainder vignette describes implementation details advanced features.","code":"rprojroot::is_r_package ## Root criterion: contains a file \"DESCRIPTION\" with contents matching \"^Package: \" rprojroot::is_rstudio_project ## Root criterion: contains a file matching \"[.]Rproj$\" with contents matching \"^Version: \" in the first line rprojroot::has_file(\".git/index\") ## Root criterion: contains a file \".git/index\" root <- rprojroot::is_r_package basename(getwd()) ## [1] \"vignettes\" readLines(root$find_file(\"DESCRIPTION\"), 3) ## [1] \"Package: rprojroot\"                             ## [2] \"Title: Finding Files in Project Subdirectories\" ## [3] \"Version: 2.1.0\" path <- root$find_file() readLines(root$find_file(path, \"DESCRIPTION\"), 3) ## [1] \"Package: rprojroot\"                             ## [2] \"Title: Finding Files in Project Subdirectories\" ## [3] \"Version: 2.1.0\" root_file <- root$make_fix_file() withr::with_dir(   \"../..\",   readLines(root_file(\"DESCRIPTION\"), 3) ) ## [1] \"Package: rprojroot\"                             ## [2] \"Title: Finding Files in Project Subdirectories\" ## [3] \"Version: 2.1.0\" root_file <- root$make_fix_file(\"C:\\\\Users\\\\User Name\\\\...\") root_file <- root$make_fix_file(dirname(thisfile()))"},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"project-root","dir":"Articles","previous_headings":"","what":"Project root","title":"Finding files in project subdirectories","text":"assume self-contained project files directories located common root directory. Also, way unambiguously identify root directory. (Often, root contains regular file whose name matches given pattern, /whose contents match another pattern.) case, following method reliably finds project root: Start search subdirectory project Proceed directory hierarchy root directory identified Git version control system (probably many tools) use similar approach: Git command can executed within subdirectory repository.","code":""},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"a-simple-example","dir":"Articles","previous_headings":"Project root","what":"A simple example","title":"Finding files in project subdirectories","text":"find_root() function implements core functionality. returns path first directory matches filtering criteria, throws error directory. Filtering criteria constructed generic fashion using root_criterion() function, has_file() function constructs criterion checks presence file specific name specific contents.","code":"library(rprojroot)  # List all files and directories below the root dir(find_root(has_file(\"DESCRIPTION\"))) ##  [1] \"_pkgdown.yml\"     \"check\"            \"codecov.yml\"      ##  [4] \"cran-comments.md\" \"DESCRIPTION\"      \"index.md\"         ##  [7] \"inst\"             \"LICENSE\"          \"LICENSE.md\"       ## [10] \"man\"              \"NAMESPACE\"        \"NEWS.md\"          ## [13] \"R\"                \"README.md\"        \"README.Rmd\"       ## [16] \"revdep\"           \"rprojroot.Rproj\"  \"tests\"            ## [19] \"TODO.md\"          \"vignettes\""},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"relative-paths-to-a-stable-root","dir":"Articles","previous_headings":"Project root > A simple example","what":"Relative paths to a stable root","title":"Finding files in project subdirectories","text":"illustrate power rprojroot demonstrating access file two different working directories. Let project package called pkgname consider desired file rrmake.R pkgname/R/rrmake.R. First, show access vignettes directory, tests/testthat directory.","code":""},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"example-a-from-vignettes","dir":"Articles","previous_headings":"Project root > A simple example > Relative paths to a stable root","what":"Example A: From vignettes","title":"Finding files in project subdirectories","text":"working directory pkgname/vignettes, can access rrmake.R file : Supplying pathname relative working directory. ’s two ways : Supplying pathname file relative root package, e.g., second method requires finding root package, can done has_file() function: , using rprojroot can specify path relative root following manner:","code":"rel_path_from_vignettes <- \"../R/rrmake.R\" rel_path_from_vignettes <- file.path(\"..\", \"R\", \"rrmake.R\") ## identical rel_path_from_root <- \"R/rrmake.R\" rel_path_from_root <- file.path(\"R\", \"rrmake.R\") ## identical has_file(\"DESCRIPTION\") ## Root criterion: contains a file \"DESCRIPTION\" # Specify a path/to/file relative to the root rel_path_from_root <- find_root_file(\"R\", \"rrmake.R\", criterion = has_file(\"DESCRIPTION\"))"},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"example-b-from-teststestthat","dir":"Articles","previous_headings":"Project root > A simple example > Relative paths to a stable root","what":"Example B: From tests/testthat","title":"Finding files in project subdirectories","text":"working directory pkgname/tests/testthat, can access rrmake.R file : Supplying pathname relative working directory. Note different previous example! However, second method … Supplying pathname file relative root package. rprojroot, exact previous example.","code":"rel_path_from_testthat <- \"../../R/rrmake.R\" # Specify a path/to/file relative to the root rel_path_from_root <- find_root_file(\"R\", \"rrmake.R\", criterion = has_file(\"DESCRIPTION\"))"},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"summary-of-examples-a-and-b","dir":"Articles","previous_headings":"Project root > A simple example > Relative paths to a stable root","what":"Summary of Examples A and B","title":"Finding files in project subdirectories","text":"Since Examples B used different working directories, rel_path_from_vignettes rel_path_from_testthat different. issue trying re-use code. issue solved using rprojroot: function find_root_file() finds file relative root, root determined checking criterion has_file(). Note follow code produces identical results building vignette sourcing chunk RStudio, provided current working directory project root anywhere . , can check make sure rprojroot successfully determined correct path:","code":"# Specify a path/to/file relative to the root rel_path_from_root <- find_root_file(\"R\", \"rrmake.R\", criterion = has_file(\"DESCRIPTION\"))  # Find a file relative to the root file.exists(rel_path_from_root) ## [1] FALSE"},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"criteria","dir":"Articles","previous_headings":"Project root","what":"Criteria","title":"Finding files in project subdirectories","text":"has_file() function (general root_criterion()) return S3 object class root_criterion: addition, character values coerced has_file criteria default, coercion applied automatically find_root(). (feature used introductory example.) return value functions can stored reused; fact, package provides 13 criteria: Defining new criteria easy: can also combine criteria via | operator:","code":"has_file(\"DESCRIPTION\") ## Root criterion: contains a file \"DESCRIPTION\" as_root_criterion(\"DESCRIPTION\") ## Root criterion: contains a file \"DESCRIPTION\" criteria ## $is_rstudio_project ## Root criterion: contains a file matching \"[.]Rproj$\" with contents matching \"^Version: \" in the first line ##  ## $is_vscode_project ## Root criterion: contains a directory \".vscode\" ##  ## $is_r_package ## Root criterion: contains a file \"DESCRIPTION\" with contents matching \"^Package: \" ##  ## $is_remake_project ## Root criterion: contains a file \"remake.yml\" ##  ## $is_pkgdown_project ## Root criterion: one of ## - contains a file \"_pkgdown.yml\" ## - contains a file \"_pkgdown.yaml\" ## - contains a file \"pkgdown/_pkgdown.yml\" ## - contains a file \"pkgdown/_pkgdown.yaml\" ## - contains a file \"inst/_pkgdown.yml\" ## - contains a file \"inst/_pkgdown.yaml\" ##  ## $is_renv_project ## Root criterion: contains a file \"renv.lock\" with contents matching \"\"Packages\":\\s*\\{\" ##  ## $is_projectile_project ## Root criterion: contains a file \".projectile\" ##  ## $is_quarto_project ## Root criterion: contains a file \"_quarto.yml\" ##  ## $is_git_root ## Root criterion: one of ## - contains a directory \".git\" ## - contains a file \".git\" with contents matching \"^gitdir: \" ##  ## $is_svn_root ## Root criterion: contains a directory \".svn\" ##  ## $is_vcs_root ## Root criterion: one of ## - contains a directory \".git\" ## - contains a file \".git\" with contents matching \"^gitdir: \" ## - contains a directory \".svn\" ##  ## $is_testthat ## Root criterion: directory name is \"testthat\" (also look in subdirectories: `tests/testthat`, `testthat`) ##  ## $from_wd ## Root criterion: from current working directory ##  ## attr(,\"class\") ## [1] \"root_criteria\" has_license <- has_file(\"LICENSE\") has_license ## Root criterion: contains a file \"LICENSE\" is_projecttemplate_project <- has_file(\"config/global.dcf\", \"^version: \") is_projecttemplate_project ## Root criterion: contains a file \"config/global.dcf\" with contents matching \"^version: \" is_r_package | is_rstudio_project ## Root criterion: one of ## - contains a file \"DESCRIPTION\" with contents matching \"^Package: \" ## - contains a file matching \"[.]Rproj$\" with contents matching \"^Version: \" in the first line"},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"shortcuts","dir":"Articles","previous_headings":"Project root","what":"Shortcuts","title":"Finding files in project subdirectories","text":"avoid specifying search criteria project root every time, shortcut functions can created. find_package_root_file() shortcut find_root_file(..., criterion = is_r_package): save typing effort, define shorter alias: criterion actually contains function allows finding file root specified criterion. project file named LICENSE, querying root results error:","code":"# Print first lines of the source for this document head(readLines(find_package_root_file(\"vignettes\", \"rprojroot.Rmd\"))) ## [1] \"---\"                                                ## [2] \"title: \\\"Finding files in project subdirectories\\\"\" ## [3] \"author: \\\"Kirill Müller\\\"\"                          ## [4] \"date: \\\"`r Sys.Date()`\\\"\"                           ## [5] \"output: rmarkdown::html_vignette\"                   ## [6] \"vignette: >\" P <- find_package_root_file  # Use a shorter alias file.exists(P(\"vignettes\", \"rprojroot.Rmd\")) ## [1] TRUE # Use the has_license criterion to find the root R <- has_license$find_file R ## function(..., path = \".\") { ##     find_root_file(..., criterion = criterion, path = path) ##   } ## <environment: 0x557a6e84c760> # Our package does not have a LICENSE file, trying to find the root results in an error R() ## [1] \"/home/runner/work/rprojroot/rprojroot\""},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"fixed-root","dir":"Articles","previous_headings":"Project root","what":"Fixed root","title":"Finding files in project subdirectories","text":"can also create function computes path relative root creation time. robust alternative $find_file(), fixes project directory $make_fix_file() called, instead searching every time. (reason also slightly faster, doubt matters practice.) function can used even later change working directory somewhere outside project: make_fix_file() member function also accepts optional path argument, case know project’s root current working directory somewhere outside. path current script knitr document can obtained using thisfile() function, ’s much easier much robust just run scripts working directory somewhere project root.","code":"# Define a function that computes file paths below the current root F <- is_r_package$make_fix_file() F ## function(...) { ##     if (!missing(..1)) { ##       abs <- is_absolute_path(..1) ##       if (all(abs)) { ##         return(path(...)) ##       } ##       if (any(abs)) { ##         stop(\"Combination of absolute and relative paths not supported.\", call. = FALSE) ##       } ##     } ##  ##     path(.(root), ...) ##   } ## <environment: 0x557a711027b0> # Show contents of the NAMESPACE file in our project readLines(F(\"NAMESPACE\")) ##  [1] \"# Generated by roxygen2: do not edit by hand\" ##  [2] \"\"                                             ##  [3] \"S3method(\\\"|\\\",root_criterion)\"               ##  [4] \"S3method(as_root_criterion,character)\"        ##  [5] \"S3method(as_root_criterion,default)\"          ##  [6] \"S3method(as_root_criterion,root_criterion)\"   ##  [7] \"S3method(format,root_criterion)\"              ##  [8] \"S3method(print,root_criterion)\"               ##  [9] \"S3method(str,root_criteria)\"                  ## [10] \"export(as.root_criterion)\"                    ## [11] \"export(as_root_criterion)\"                    ## [12] \"export(criteria)\"                             ## [13] \"export(find_package_root_file)\"               ## [14] \"export(find_remake_root_file)\"                ## [15] \"export(find_root)\"                            ## [16] \"export(find_root_file)\"                       ## [17] \"export(find_rstudio_root_file)\"               ## [18] \"export(find_testthat_root_file)\"              ## [19] \"export(from_wd)\"                              ## [20] \"export(get_root_desc)\"                        ## [21] \"export(has_basename)\"                         ## [22] \"export(has_dir)\"                              ## [23] \"export(has_file)\"                             ## [24] \"export(has_file_pattern)\"                     ## [25] \"export(is.root_criterion)\"                    ## [26] \"export(is_drake_project)\"                     ## [27] \"export(is_git_root)\"                          ## [28] \"export(is_pkgdown_project)\"                   ## [29] \"export(is_projectile_project)\"                ## [30] \"export(is_quarto_project)\"                    ## [31] \"export(is_r_package)\"                         ## [32] \"export(is_remake_project)\"                    ## [33] \"export(is_renv_project)\"                      ## [34] \"export(is_root_criterion)\"                    ## [35] \"export(is_rstudio_project)\"                   ## [36] \"export(is_svn_root)\"                          ## [37] \"export(is_targets_project)\"                   ## [38] \"export(is_testthat)\"                          ## [39] \"export(is_vcs_root)\"                          ## [40] \"export(is_vscode_project)\"                    ## [41] \"export(root_criterion)\"                       ## [42] \"export(thisfile)\"                             ## [43] \"export(thisfile_knit)\"                        ## [44] \"export(thisfile_r)\"                           ## [45] \"export(thisfile_rscript)\"                     ## [46] \"export(thisfile_source)\"                      ## [47] \"importFrom(utils,str)\"                        ## [48] \"importFrom(utils,tail)\" # Print the size of the namespace file, working directory outside the project withr::with_dir(   \"../..\",   file.size(F(\"NAMESPACE\")) ) ## [1] 1200"},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"testthat-files","dir":"Articles","previous_headings":"","what":"testthat files","title":"Finding files in project subdirectories","text":"Tests run testthat commonly use files live tests/testthat directory. Ideally, work following situation: package development (working directory: package root) testing devtools::test() (working directory: tests/testthat) running R CMD check (working directory: renamed recursive copy tests) is_testthat criterion allows robust lookup test files. example code lists files hierarchy test directory. uses two project root lookups total, also works rendering vignette (sigh):","code":"is_testthat ## Root criterion: directory name is \"testthat\" (also look in subdirectories: `tests/testthat`, `testthat`) dir(is_testthat$find_file(\"hierarchy\", path = is_r_package$find_file())) ## [1] \"a\"               \"b\"               \"c\"               ## [4] \"DESCRIPTION\"     \"hierarchy.Rproj\""},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"another-example-custom-testing-utilities","dir":"Articles","previous_headings":"testthat files","what":"Another example: custom testing utilities","title":"Finding files in project subdirectories","text":"hassle using saved data files testing made even easier using rprojroot utility function. example, suppose testing file tests/testthat/test_my_fun.R tests my_fun() function: two pieces information ’ll need every time test_my_fun.R run: my_args expected_output. Typically, objects saved .Rdata files saved subdirectory. example, save my_args.Rdata expected_output.Rdata tests/testthat/testing_data subdirectory. , find easily contexts, can use rprojroot! Since data files live subdirectory, can create utility function get_my_path() always look directory types files. , since testthat package look source tests/testthat/helper.R file running tests, can place get_my_path() file use throughout tests: Now can ask get_my_path() find important data files using function within test scripts! example wild, see test_sheet() function readxl package.","code":"my_fun_run <- do.call(my_fun, my_args)  testthat::test_that(   \"my_fun() returns expected output\",   testthat::expect_equal(     my_fun_run,     expected_output   ) ) ## saved to tests/testthat/helper.R get_my_path <- function(file_name) {   rprojroot::find_testthat_root_file(     \"testing_data\", filename   ) } ## Find the correct path with your custom rprojroot helper function path_to_my_args_file <- get_my_path(\"my_args.Rdata\")  ## Load the input arguments load(file = path_to_my_args_file)  ## Run the function with those arguments my_fun_run <- do.call(my_fun, my_args)  ## Load the historical expectation with the helper load(file = get_my_path(\"expected_output.Rdata\"))  ## Pass all tests and achieve nirvana testthat::test_that(   \"my_fun() returns expected output\",   testthat::expect_equal(     my_fun_run,     expected_output   ) )"},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Finding files in project subdirectories","text":"rprojroot package allows easy access files project root project root can identified easily, e.g. directory whole hierarchy contains specific file. robust solution finding files largish projects subdirectory hierarchy current working directory assumed fixed. (However, least initially, current working directory must somewhere project root.)","code":""},{"path":"https://rprojroot.r-lib.org/articles/rprojroot.html","id":"acknowledgement","dir":"Articles","previous_headings":"","what":"Acknowledgement","title":"Finding files in project subdirectories","text":"package inspired gist “Stop working directory insanity” Jennifer Bryan, way Git knows files .","code":""},{"path":"https://rprojroot.r-lib.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kirill Müller. Author, maintainer.","code":""},{"path":"https://rprojroot.r-lib.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Müller K (2025). rprojroot: Finding Files Project Subdirectories. R package version 2.1.0, https://rprojroot.r-lib.org/.","code":"@Manual{,   title = {rprojroot: Finding Files in Project Subdirectories},   author = {Kirill Müller},   year = {2025},   note = {R package version 2.1.0},   url = {https://rprojroot.r-lib.org/}, }"},{"path":"https://rprojroot.r-lib.org/index.html","id":"rprojroot","dir":"","previous_headings":"","what":"Finding Files in Project Subdirectories","title":"Finding Files in Project Subdirectories","text":"package helps accessing files relative project root stop working directory insanity. low-level helper package package.","code":"library(rprojroot)"},{"path":"https://rprojroot.r-lib.org/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Finding Files in Project Subdirectories","text":"rprojroot package works best “project”: related files contained subdirectory can categorized using strict criterion. Let’s create package demonstration. R packages satisfy is_r_package criterion. criterion object contains find_file() function. pkg working directory, function works like file.path(), rooted working directory: works identically starting subdirectory: one exception: first component passed find_file() already absolute path. allows safely applying function paths may absolute relative: long sure working directory somewhere inside project, can retrieve project root.","code":"dir <- tempfile() pkg <- usethis::create_package(dir) #> ✔ Creating #>   /var/folders/dj/yhk9rkx97wn_ykqtnmk18xvc0000gn/T/RtmpVBhMLR/file337b29a46586/. #> ✔ Setting active project to #>   \"/private/var/folders/dj/yhk9rkx97wn_ykqtnmk18xvc0000gn/T/RtmpVBhMLR/file337b29a46586\". #> ✔ Creating R/. #> ✔ Writing DESCRIPTION. #> Package: file337b29a46586 #> Title: What the Package Does (One Line, Title Case) #> Version: 0.0.0.9000 #> Date: 2025-06-27 #> Authors@R (parsed): #>     * Kirill Müller <kirill@cynkra.com> [aut, cre] (<https://orcid.org/0000-0002-1416-3412>) #> Description: What the package does (one paragraph). #> License: MIT #> URL: https://github.com/krlmlr/rprojroot, #>     https://krlmlr.github.io/rprojroot #> BugReports: https://github.com/krlmlr/rprojroot/issues #> Encoding: UTF-8 #> Roxygen: list(markdown = TRUE) #> RoxygenNote: 7.3.2.9000 #> ✔ Writing NAMESPACE. #> ✔ Setting active project to \"<no active project>\". setwd(pkg) is_r_package #> Root criterion: contains a file \"DESCRIPTION\" with contents matching \"^Package: \" is_r_package$find_file() #> [1] \"/private/var/folders/dj/yhk9rkx97wn_ykqtnmk18xvc0000gn/T/RtmpVBhMLR/file337b29a46586\" is_r_package$find_file(\"tests\", \"testthat\") #> [1] \"/private/var/folders/dj/yhk9rkx97wn_ykqtnmk18xvc0000gn/T/RtmpVBhMLR/file337b29a46586/tests/testthat\" setwd(file.path(pkg, \"R\")) is_r_package$find_file() #> [1] \"/private/var/folders/dj/yhk9rkx97wn_ykqtnmk18xvc0000gn/T/RtmpVBhMLR/file337b29a46586\" is_r_package$find_file(\"tests\", \"testthat\") #> [1] \"/private/var/folders/dj/yhk9rkx97wn_ykqtnmk18xvc0000gn/T/RtmpVBhMLR/file337b29a46586/tests/testthat\" setwd(file.path(pkg, \"R\")) path <- is_r_package$find_file() is_r_package$find_file(path, \"tests\", \"testthat\") #> [1] \"/private/var/folders/dj/yhk9rkx97wn_ykqtnmk18xvc0000gn/T/RtmpVBhMLR/file337b29a46586/tests/testthat\""},{"path":"https://rprojroot.r-lib.org/index.html","id":"installation-and-further-reading","dir":"","previous_headings":"","what":"Installation and further reading","title":"Finding Files in Project Subdirectories","text":"Install package CRAN: See documentation detail.","code":"install.package(\"rprojroot\")"},{"path":"https://rprojroot.r-lib.org/reference/criteria.html","id":null,"dir":"Reference","previous_headings":"","what":"Prespecified criteria — criteria","title":"Prespecified criteria — criteria","text":"collection commonly used root criteria.","code":""},{"path":"https://rprojroot.r-lib.org/reference/criteria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prespecified criteria — criteria","text":"","code":"criteria  is_rstudio_project  is_vscode_project  is_r_package  is_remake_project  is_drake_project  is_targets_project  is_pkgdown_project  is_renv_project  is_projectile_project  is_quarto_project  is_git_root  is_svn_root  is_vcs_root  is_testthat  from_wd"},{"path":"https://rprojroot.r-lib.org/reference/criteria.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prespecified criteria — criteria","text":"is_rstudio_project looks file extension .Rproj. is_vscode_project looks .vscode directory. is_r_package looks DESCRIPTION file. is_remake_project looks remake.yml file. is_drake_project looks .drake directory. is_targets_project looks _targets.R file. is_pkgdown_project looks _pkgdown.yml, _pkgdown.yaml, pkgdown/_pkgdown.yml /inst/_pkgdown.yml file. is_renv_project looks renv.lock file. is_projectile_project looks .projectile file. is_quarto_project looks _quarto.yml file. is_git_root looks .git directory. is_svn_root looks .svn directory. is_vcs_root looks root version control system, currently Git SVN supported. is_testthat looks testthat directory, works developing, testing, checking package. from_wd uses current working directory.","code":""},{"path":"https://rprojroot.r-lib.org/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — deprecated","title":"Deprecated functions — deprecated","text":"Use as_root_criterion() is_root_criterion(), respectively.","code":""},{"path":"https://rprojroot.r-lib.org/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — deprecated","text":"","code":"as.root_criterion(...)  is.root_criterion(...)"},{"path":"https://rprojroot.r-lib.org/reference/find_root.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the root of a directory hierarchy — find_root","title":"Find the root of a directory hierarchy — find_root","text":"root defined directory contains regular file whose name matches given pattern optionally contains given text. search root starts given directory (working directory default), proceeds directory hierarchy. get_root_desc() returns description criterion root path. especially useful composite root criteria created |.root_criterion().","code":""},{"path":"https://rprojroot.r-lib.org/reference/find_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the root of a directory hierarchy — find_root","text":"","code":"find_root(criterion, path = \".\")  get_root_desc(criterion, path)"},{"path":"https://rprojroot.r-lib.org/reference/find_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the root of a directory hierarchy — find_root","text":"criterion [root_criterion] criterion, one predefined criteria created root_criterion(). coerced using as_root_criterion(). path [character(1)] start directory.","code":""},{"path":"https://rprojroot.r-lib.org/reference/find_root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the root of a directory hierarchy — find_root","text":"normalized path root specified search criterion. Throws error root found","code":""},{"path":"https://rprojroot.r-lib.org/reference/find_root.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the root of a directory hierarchy — find_root","text":"Starting working directory, find_root() function searches root. root found, ... arguments used construct path; thus, extra arguments given, root returned. root found, error thrown.","code":""},{"path":[]},{"path":"https://rprojroot.r-lib.org/reference/find_root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the root of a directory hierarchy — find_root","text":"","code":"if (FALSE) { # \\dontrun{ find_root(has_file_pattern(   pattern = glob2rx(\"DESCRIPTION\"),   contents = \"^Package: \" )) } # }"},{"path":"https://rprojroot.r-lib.org/reference/find_root_file.html","id":null,"dir":"Reference","previous_headings":"","what":"File paths relative to the root of a directory hierarchy — find_root_file","title":"File paths relative to the root of a directory hierarchy — find_root_file","text":"find_root_file() wrapper around find_root() appends arbitrary number path components root using base::file.path().","code":""},{"path":"https://rprojroot.r-lib.org/reference/find_root_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File paths relative to the root of a directory hierarchy — find_root_file","text":"","code":"find_root_file(..., criterion, path = \".\")  find_rstudio_root_file(..., path = \".\")  find_package_root_file(..., path = \".\")  find_remake_root_file(..., path = \".\")  find_testthat_root_file(..., path = \".\")"},{"path":"https://rprojroot.r-lib.org/reference/find_root_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File paths relative to the root of a directory hierarchy — find_root_file","text":"... [character] path components passed file.path(). arguments must length length one. criterion [root_criterion] criterion, one predefined criteria created root_criterion(). coerced using as_root_criterion(). path [character(1)] start directory.","code":""},{"path":"https://rprojroot.r-lib.org/reference/find_root_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File paths relative to the root of a directory hierarchy — find_root_file","text":"normalized path root specified search criteria, additional path components appended. Throws error root found.","code":""},{"path":"https://rprojroot.r-lib.org/reference/find_root_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File paths relative to the root of a directory hierarchy — find_root_file","text":"function operates notion relative paths. ... argument expected contain path relative root. first path component passed ... already absolute path, criterion path arguments ignored, ... forwarded file.path().","code":""},{"path":[]},{"path":"https://rprojroot.r-lib.org/reference/find_root_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File paths relative to the root of a directory hierarchy — find_root_file","text":"","code":"if (FALSE) { # \\dontrun{ find_package_root_file(\"tests\", \"testthat.R\") has_file(\"DESCRIPTION\", \"^Package: \")$find_file has_file(\"DESCRIPTION\", \"^Package: \")$make_fix_file(\".\") } # }"},{"path":"https://rprojroot.r-lib.org/reference/root_criterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a directory the project root? — root_criterion","title":"Is a directory the project root? — root_criterion","text":"Objects root_criterion class decide given directory project root.","code":""},{"path":"https://rprojroot.r-lib.org/reference/root_criterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a directory the project root? — root_criterion","text":"","code":"root_criterion(testfun, desc, subdir = NULL)  is_root_criterion(x)  as_root_criterion(x)  # S3 method for class 'character' as_root_criterion(x)  # S3 method for class 'root_criterion' as_root_criterion(x)  # S3 method for class 'root_criterion' x | y  has_file(filepath, contents = NULL, n = -1L, fixed = FALSE)  has_dir(filepath)  has_file_pattern(pattern, contents = NULL, n = -1L, fixed = FALSE)  has_basename(basename, subdir = NULL)"},{"path":"https://rprojroot.r-lib.org/reference/root_criterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a directory the project root? — root_criterion","text":"testfun [function|list(function)] function one parameter returns TRUE directory specified parameter project root, FALSE otherwise. Can also list functions. desc [character] textual description test criterion, length testfun. subdir [character] given, criterion also tested subdirectories defined argument, order given. first existing directory used starting point. used is_testthat criterion needs descend tests/testthat starting package root, stay inside tests/testthat called testthat test. x [object] object. y [object] object. filepath [character(1)] File path (can contain directories). contents, fixed [character(1)] contents NULL (default), file contents checked. Otherwise, contents regular expression (fixed FALSE) search string (fixed TRUE), file contents checked matching lines. n [integerish(1)] Maximum number lines read check file contents. pattern [character(1)] Regular expression match file name . basename [character(1)] required name root directory.","code":""},{"path":"https://rprojroot.r-lib.org/reference/root_criterion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a directory the project root? — root_criterion","text":"S3 object class root_criterion following members: testfun testfun argument desc desc argument subdir subdir argument find_file function ... path arguments returns path relative root, specified criterion. optional path argument specifies starting directory, defaults \".\". function forwards find_root_file(), passes ... directly file.path() first argument absolute path. make_fix_file function path argument returns function finds paths relative root.  criterion cr, result cr$make_fix_file(\".\")(...) identical cr$find_file(...). function created make_fix_file() can saved variable independent current working directory.","code":""},{"path":"https://rprojroot.r-lib.org/reference/root_criterion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is a directory the project root? — root_criterion","text":"Construct criteria using root_criterion general fashion specifying function path argument, description. as_root_criterion() function accepts objects class root_criterion, character values; latter converted criteria using has_file. Root criteria can combined | operator. result composite root criterion requires either original criteria match. has_file() function constructs criterion checks existence specific file (can subdirectory root) specific contents. has_dir() function constructs criterion checks existence specific directory. has_file_pattern() function constructs criterion checks existence file matches pattern, specific contents. has_basename() function constructs criterion checks base::basename() root directory specific name, support case-insensitive file systems.","code":""},{"path":"https://rprojroot.r-lib.org/reference/root_criterion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a directory the project root? — root_criterion","text":"","code":"root_criterion(function(path) file.exists(file.path(path, \"somefile\")), \"has somefile\") #> Root criterion: has somefile has_file(\"DESCRIPTION\") #> Root criterion: contains a file \"DESCRIPTION\" is_r_package #> Root criterion: contains a file \"DESCRIPTION\" with contents matching \"^Package: \" if (FALSE) { # \\dontrun{ is_r_package$find_file is_r_package$make_fix_file(\".\") } # }"},{"path":"https://rprojroot.r-lib.org/reference/rprojroot-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rprojroot: Finding Files in Project Subdirectories — rprojroot-package","title":"rprojroot: Finding Files in Project Subdirectories — rprojroot-package","text":"Robust, reliable flexible paths files project root. 'root' project defined directory matches certain criterion, e.g., contains certain regular file.","code":""},{"path":"https://rprojroot.r-lib.org/reference/rprojroot-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rprojroot: Finding Files in Project Subdirectories — rprojroot-package","text":"See \"Value\" section root_criterion() documentation root criterion objects,  criteria useful predefined root criteria.","code":""},{"path":[]},{"path":"https://rprojroot.r-lib.org/reference/rprojroot-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rprojroot: Finding Files in Project Subdirectories — rprojroot-package","text":"Maintainer: Kirill Müller kirill@cynkra.com (ORCID)","code":""},{"path":"https://rprojroot.r-lib.org/reference/rprojroot-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rprojroot: Finding Files in Project Subdirectories — rprojroot-package","text":"","code":"criteria #> $is_rstudio_project #> Root criterion: contains a file matching \"[.]Rproj$\" with contents matching \"^Version: \" in the first line #>  #> $is_vscode_project #> Root criterion: contains a directory \".vscode\" #>  #> $is_r_package #> Root criterion: contains a file \"DESCRIPTION\" with contents matching \"^Package: \" #>  #> $is_remake_project #> Root criterion: contains a file \"remake.yml\" #>  #> $is_pkgdown_project #> Root criterion: one of #> - contains a file \"_pkgdown.yml\" #> - contains a file \"_pkgdown.yaml\" #> - contains a file \"pkgdown/_pkgdown.yml\" #> - contains a file \"pkgdown/_pkgdown.yaml\" #> - contains a file \"inst/_pkgdown.yml\" #> - contains a file \"inst/_pkgdown.yaml\" #>  #> $is_renv_project #> Root criterion: contains a file \"renv.lock\" with contents matching \"\"Packages\":\\s*\\{\" #>  #> $is_projectile_project #> Root criterion: contains a file \".projectile\" #>  #> $is_quarto_project #> Root criterion: contains a file \"_quarto.yml\" #>  #> $is_git_root #> Root criterion: one of #> - contains a directory \".git\" #> - contains a file \".git\" with contents matching \"^gitdir: \" #>  #> $is_svn_root #> Root criterion: contains a directory \".svn\" #>  #> $is_vcs_root #> Root criterion: one of #> - contains a directory \".git\" #> - contains a file \".git\" with contents matching \"^gitdir: \" #> - contains a directory \".svn\" #>  #> $is_testthat #> Root criterion: directory name is \"testthat\" (also look in subdirectories: `tests/testthat`, `testthat`) #>  #> $from_wd #> Root criterion: from current working directory #>  #> attr(,\"class\") #> [1] \"root_criteria\" if (FALSE) { # \\dontrun{ is_r_package$find_file(\"NAMESPACE\") root_fun <- is_r_package$make_fix_file() root_fun(\"NAMESPACE\") } # }"},{"path":"https://rprojroot.r-lib.org/reference/thisfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines the path of the currently running script — thisfile","title":"Determines the path of the currently running script — thisfile","text":"R store export path currently running script.  attempt circumvent limitation applying heuristics (call stack argument inspection) work many cases. CAVEAT: Use function workflow permit solution: script needs know location, set outside context script possible.","code":""},{"path":"https://rprojroot.r-lib.org/reference/thisfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines the path of the currently running script — thisfile","text":"","code":"thisfile()  thisfile_source()  thisfile_r()  thisfile_rscript()  thisfile_knit()"},{"path":"https://rprojroot.r-lib.org/reference/thisfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines the path of the currently running script — thisfile","text":"path currently running script, NULL determined.","code":""},{"path":"https://rprojroot.r-lib.org/reference/thisfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determines the path of the currently running script — thisfile","text":"functions currently work script sourced, processed knitr, run Rscript using --file parameter R executable.  code run Rscript, exact value parameter passed Rscript returned.","code":""},{"path":"https://rprojroot.r-lib.org/reference/thisfile.html","id":"life-cycle","dir":"Reference","previous_headings":"","what":"Life cycle","title":"Determines the path of the currently running script — thisfile","text":"functions now available whereami package.","code":""},{"path":"https://rprojroot.r-lib.org/reference/thisfile.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Determines the path of the currently running script — thisfile","text":"https://stackoverflow.com/q/1815606/946850","code":""},{"path":[]},{"path":"https://rprojroot.r-lib.org/reference/thisfile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determines the path of the currently running script — thisfile","text":"Kirill Müller, Hadley Wickham, Michael R. Head","code":""},{"path":"https://rprojroot.r-lib.org/reference/thisfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines the path of the currently running script — thisfile","text":"","code":"if (FALSE) { # \\dontrun{ thisfile() } # }"},{"path":[]},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"rprojroot 2.1.0 (2025-07-12)","text":"Fix example find_root() (@salim-b, #98).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"features-2-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"rprojroot 2.1.0 (2025-07-12)","text":"Add is_vscode_project criterion, true .vscode/ directory exists (#155, #157, @jennybc). New is_targets_project (@mitchelloharawild, #108, #146). Avoid warnings invalid inputs non-native encoding (@bastistician, #80). Align is_pkgdown_project pkgdown > 2.0.9. (#104, #106). Avoid warnings Windows network drives (#105).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"chore-2-1-0","dir":"Changelog","previous_headings":"","what":"Chore","title":"rprojroot 2.1.0 (2025-07-12)","text":"Rename is_root() is_fs_root() avoid confusion (#101).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"documentation-2-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"rprojroot 2.1.0 (2025-07-12)","text":"Switch index.md (#113). Clarify subdir argument (#103). Fix typo (@salim-b, #99).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"testing-2-1-0","dir":"Changelog","previous_headings":"","what":"Testing","title":"rprojroot 2.1.0 (2025-07-12)","text":"Replace mockr testthat::local_mocked_bindings() (@salim-b, #97).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"rprojroot-204-2023-11-05","dir":"Changelog","previous_headings":"","what":"rprojroot 2.0.4 (2023-11-05)","title":"rprojroot 2.0.4 (2023-11-05)","text":"CRAN release: 2023-11-05","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"features-2-0-4","dir":"Changelog","previous_headings":"","what":"Features","title":"rprojroot 2.0.4 (2023-11-05)","text":"Add is_renv_project criterion looking renv.lock file (@gadenbuie, #86). Add is_quarto_project criterion looking Quarto project (@olivroy, #91, #92).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"chore-2-0-4","dir":"Changelog","previous_headings":"","what":"Chore","title":"rprojroot 2.0.4 (2023-11-05)","text":"Update maintainer e-mail address.","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"testing-2-0-4","dir":"Changelog","previous_headings":"","what":"Testing","title":"rprojroot 2.0.4 (2023-11-05)","text":"Wrap :: skip installed tests (#94).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"rprojroot-203-2022-03-25","dir":"Changelog","previous_headings":"","what":"rprojroot 2.0.3 (2022-03-25)","title":"rprojroot 2.0.3 (2022-03-25)","text":"CRAN release: 2022-04-02 Add is_pkgdown_project root criterion looking _pkgdown.yml, _pkgdown.yaml, pkgdown/_pkgdown.yml /inst/_pkgdown.yml file (#79, @salim-b). Avoid LazyData DESCRIPTION.","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"rprojroot-202-2020-11-15","dir":"Changelog","previous_headings":"","what":"rprojroot 2.0.2 (2020-11-15)","title":"rprojroot 2.0.2 (2020-11-15)","text":"CRAN release: 2020-11-15","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"features-2-0-2","dir":"Changelog","previous_headings":"","what":"Features","title":"rprojroot 2.0.2 (2020-11-15)","text":"find_root_file(), first path component already absolute path, path returned unchanged without referring root. allows using root-relative absolute paths ::(). Mixing root-relative absolute paths call returns error (#59). find_root_file() propagates NA values path components. Using tidyverse recycling rules path components length different one (#66). has_file() has_file_pattern() gain fixed argument (#75). New is_drake_project criterion (#34). Add subdir argument make_fix_file() (#33, @BarkleyBG). Update documentation version control criteria (#35, @uribo).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"breaking-changes-2-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"rprojroot 2.0.2 (2020-11-15)","text":"has_file() has_dir() now throw error filepath argument absolute path (#74). has_basename() replaces has_dirname() avoid confusion (#63). as_root_criterion() is_root_criterion() replace . ., respectively. latter soft-deprecated. thisfile() related functions soft-deprecated, now available whereami package (#43).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"bug-fixes-2-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"rprojroot 2.0.2 (2020-11-15)","text":"is_dirname() criterion longer considers sibling directories (#44).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"internal-2-0-2","dir":"Changelog","previous_headings":"","what":"Internal","title":"rprojroot 2.0.2 (2020-11-15)","text":"Use testthat 3e (#70). backports package longer imported (#68). Re-license MIT (#50). Move checks GitHub Actions (#52). Availability suggested packages knitr rmarkdown, pandoc, now checked running corresponding tests.","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"rprojroot-13-2-2017-12-22","dir":"Changelog","previous_headings":"","what":"rprojroot 1.3-2 (2017-12-22)","title":"rprojroot 1.3-2 (2017-12-22)","text":"CRAN release: 2018-01-03 Availability suggested packages knitr rmarkdown, pandoc, now checked running corresponding tests.","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"rprojroot-13-1-2017-12-18","dir":"Changelog","previous_headings":"","what":"rprojroot 1.3-1 (2017-12-18)","title":"rprojroot 1.3-1 (2017-12-18)","text":"CRAN release: 2017-12-18 Adapt testthat 2.0.0. New thisfile(), moved kimisc (#8). Add examples vignette (#26, @BarkleyBG). Detect .git directories created git clone --separate-git-dir=... (#24, @karldw).","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"rprojroot-12-2017-01-15","dir":"Changelog","previous_headings":"","what":"rprojroot 1.2 (2017-01-15)","title":"rprojroot 1.2 (2017-01-15)","text":"CRAN release: 2017-01-16 is_projectile_project recognize projectile projects (#21). has_dir() constructs root criteria check existence directory. is_git_root, is_svn_root is_vcs_root look version control system root (#19). get_root_desc() returns description criterion applies given root, useful composite criteria created |. Improve formatting alternative criteria (#18). root found, start path shown error message. $testfun member rprojroot S3 class now list functions instead function.","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"rprojroot-11-2016-10-29","dir":"Changelog","previous_headings":"","what":"rprojroot 1.1 (2016-10-29)","title":"rprojroot 1.1 (2016-10-29)","text":"CRAN release: 2016-10-29 Compatible R >= 3.0.0 help backports package. is_remake_project find_remake_root_file() look remake project (#17). is_testthat find_testthat_root_file() looks tests/testthat root (#14). from_wd, useful creating accessors known path (#11). Criteria can combined | operator (#15). Add package documentation examples (#13). Clarify difference find_file() make_fix_file() vignette (#9). Remove unexported functions documentation examples (#10). Use pkgdown create website. Use Travis instead wercker. Travis tests three R versions, OS X. Improve AppVeyor testing.","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"rprojroot-10-2-2016-03-28","dir":"Changelog","previous_headings":"","what":"rprojroot 1.0-2 (2016-03-28)","title":"rprojroot 1.0-2 (2016-03-28)","text":"CRAN release: 2016-03-28 Fix test fails Windows CRAN.","code":""},{"path":"https://rprojroot.r-lib.org/news/index.html","id":"rprojroot-10-2016-03-26","dir":"Changelog","previous_headings":"","what":"rprojroot 1.0 (2016-03-26)","title":"rprojroot 1.0 (2016-03-26)","text":"CRAN release: 2016-03-26 Initial CRAN release. Member functions: find_file() make_fix_file() root_criterion() .root_criterion() .root_criterion() has_file() has_file_pattern() is_r_package is_rstudio_project find_package_root_file() find_rstudio_root_file() find_root() find_root_file() Vignette","code":""}]
